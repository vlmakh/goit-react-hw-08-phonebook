{"version":3,"file":"static/js/229.f80fbaf3.chunk.js","mappings":"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","sources":["pages/ContactsPage/ContactsPage.styled.jsx","components/UserMenu/UserMenu.styled.jsx","components/Button/Button.styled.jsx","components/UserMenu/UserMenu.js","components/ContactForm/ContactForm.styled.jsx","components/AddForm/AddForm.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.js","components/EditForm/EditForm.js","components/ContactListItem/ContactListItem.styled.jsx","components/Confirm/Confirm.js","components/ContactListItem/ContactListItem.js","utils/getRandomHexColor.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Header = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 68px;\n  background: #212121;\n  color: #ffffff;\n  z-index: 1000;\n`;\n\nexport const Container = styled.div`\n  max-width: 360px;\n  margin: 0 auto;\n`\n\nexport const Contacts = styled.div`\n  max-width: 360px;\n  margin: 0 auto;\n  background-color: #FFFFFF;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.8);\n  border-left: 1px solid #212121;\n  border-right: 1px solid #212121;\n`\n\nexport const Footer = styled.div`\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 36px;\n  background: #212121;\n  color: #ffffff;\n  z-index: 1000;\n`;\n","import styled from '@emotion/styled';\n\nexport const UserMenuWrap = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 4px 8px;\n`;\n\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 4px 8px;\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 4px;\n  border: none;\n  background-color: #fcd535;\n  transition: background-color 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: #ffcc00;\n  }\n\n  :focus-visible {\n    outline: none;\n  }\n`;","import { UserMenuWrap } from './UserMenu.styled';\nimport { Button } from 'components/Button/Button.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'redux/operations';\n\nexport function UserMenu() {\n  const dispatch = useDispatch();\n  const userName = useSelector(state => state.auth.user.name);\n\n  return (\n    <UserMenuWrap>\n      <h4>Welcome, {userName}</h4>\n      <Button type=\"button\" onClick={() => dispatch(logout())}>\n        Logout\n      </Button>\n    </UserMenuWrap>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 360px;\n  padding: 16px;\n  border: 1px solid #212121;\n  border-radius: 4px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.8);\n  background-color: white;\n\n  @media screen and (max-width: 360px) {\n    width: 100%;\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:not(:first-of-type) {\n    margin-top: 16px;\n  }\n`\n\nexport const Input = styled(Field)`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  padding: 4px;\n`;\n\nexport const FormBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 60px;\n  height: 60px;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 50%;\n  cursor: pointer;\n  font-weight: 700;\n\n  transition: color 250ms linear, background-color 250ms linear;\n\n  :hover {\n    background-color: #ffcc00;\n    color: white;\n  }\n`;\n\nexport const ErrorStyled = styled(ErrorMessage)`\n  position: absolute;\n  bottom: 0;\n  transform: translatey(100%);\n\n  font-size: 10px;\n  background-color: white;\n  color: #212121;\n`;\n","import PropTypes from 'prop-types';\nimport { HiPhone, HiUserAdd } from 'react-icons/hi';\nimport { MdOutlineDataSaverOn } from 'react-icons/md';\nimport { Box } from 'components/Box/Box';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport {\n  FormStyled,\n  FormField,\n  Input,\n  FormBtn,\n  ErrorStyled,\n} from 'components/ContactForm/ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nexport function AddForm({ toggleModalForm }) {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n\n  const handleSubmit = (newContact, { resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(` ${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    resetForm();\n    toggleModalForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <Box>\n          <FormField>\n            <HiUserAdd />\n            <Input type=\"text\" name=\"name\" placeholder=\"Name\" />\n            <ErrorStyled component=\"div\" name=\"name\" />\n          </FormField>\n\n          <FormField>\n            <HiPhone />\n            <Input type=\"tel\" name=\"number\" placeholder=\"number\" />\n            <ErrorStyled component=\"div\" name=\"number\" />\n          </FormField>\n        </Box>\n\n        <FormBtn type=\"submit\" aria-label=\"Add contact\">\n          <MdOutlineDataSaverOn size=\"40\" fill=\"currentColor\" />\n        </FormBtn>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nAddForm.propTypes = {\n  toggleModalForm: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  padding-top: 8px;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Overlay, ModalWrap } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = event => {\n    if (event.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdrop = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdrop}>\n      <ModalWrap>{children}</ModalWrap>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { HiPhone, HiUserAdd } from 'react-icons/hi';\nimport { MdSave } from 'react-icons/md';\nimport { Box } from 'components/Box/Box';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport {\n  FormStyled,\n  FormField,\n  Input,\n  FormBtn,\n  ErrorStyled,\n} from 'components/ContactForm/ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().phone().required(),\n});\n\nexport function EditForm({ onFormSubmit, nameToUpdate, numberToUpdate }) {\n  const updateContact = values => {\n    console.log(values);\n    onFormSubmit(values);\n  };\n\n  return (\n    <Formik\n      onSubmit={updateContact}\n      initialValues={{\n        name: nameToUpdate,\n        number: numberToUpdate,\n      }}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <Box>\n          <FormField>\n            <HiUserAdd />\n            <Input type=\"text\" name=\"name\" placeholder=\"Name\" />\n            <ErrorStyled component=\"div\" name=\"name\" />\n          </FormField>\n\n          <FormField>\n            <HiPhone />\n            <Input type=\"tel\" name=\"number\" placeholder=\"number\" />\n            <ErrorStyled component=\"div\" name=\"number\" />\n          </FormField>\n        </Box>\n\n        <FormBtn type=\"submit\" aria-label=\"Formtact\">\n          <MdSave size=\"40\" />\n        </FormBtn>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nEditForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  nameToUpdate: PropTypes.string.isRequired,\n  numberToUpdate: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactName = styled.span`\n  margin-left: 8px;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nexport const ContactNumber = styled.span`\n  margin: 0 4px 0 auto;\n  font-size: 14px;\n`;\n\nexport const ContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 4px;\n  padding: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  color: #666666;\n\n  transition: color 250ms linear;\n`;\n\nexport const EditBtn = styled(ContactBtn)`\n  :hover {\n    color: #212121;\n  }\n`;\n\nexport const DelBtn = styled(ContactBtn)`\n  :hover {\n    color: red;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Box } from 'components/Box/Box';\nimport { Formik } from 'formik';\nimport { FormStyled, FormBtn } from 'components/ContactForm/ContactForm.styled';\n\nexport function Confirm({ onFormSubmit, toggleConfirm, name }) {\n  return (\n    <Formik>\n      <FormStyled>\n        <Box width=\"100%\">\n          <p>\n            Delete contact <b>{name}</b>?\n          </p>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <FormBtn type=\"button\" aria-label=\"Cancel\" onClick={toggleConfirm}>\n              Cancel\n            </FormBtn>\n\n            <FormBtn\n              type=\"button\"\n              aria-label=\"Delete contact\"\n              onClick={onFormSubmit}\n            >\n              DELETE\n            </FormBtn>\n          </Box>\n        </Box>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nConfirm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  toggleConfirm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { MdEdit, MdDeleteForever } from 'react-icons/md';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { Box } from 'components/Box/Box';\nimport { deleteContact, updateContact } from 'redux/operations';\nimport {\n  ContactName,\n  ContactNumber,\n  EditBtn,\n  DelBtn,\n} from './ContactListItem.styled';\nimport { Confirm } from 'components/Confirm/Confirm';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nexport function ContactListItem({ id, name, number }) {\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleEditForm = () => {\n    setShowEditForm(!showEditForm);\n  };\n\n  const toggleConfirm = () => {\n    setShowConfirm(!showConfirm);\n  };\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact({ contactId, name }));\n  };\n\n  const handleUpdate = updatedContact => {\n    dispatch(updateContact({ id, ...updatedContact }));\n    toggleEditForm();\n  };\n\n  return (\n    <>\n      <Box width=\"100%\" display=\"flex\" alignItems=\"center\" p={2}>\n        <BsPersonCircle size=\"20\" color={getRandomHexColor()} />\n        <ContactName>{name}</ContactName>\n        <ContactNumber>{number}</ContactNumber>\n      </Box>\n\n      <EditBtn type=\"button\" onClick={toggleEditForm} aria-label=\"Edit contact\">\n        <MdEdit size=\"18\" />\n      </EditBtn>\n\n      <DelBtn\n        type=\"button\"\n        onClick={() => setShowConfirm(true)}\n        aria-label=\"Delete contact\"\n      >\n        <MdDeleteForever size=\"18\" />\n      </DelBtn>\n\n      {showEditForm && (\n        <Modal onClose={toggleEditForm}>\n          <EditForm\n            onFormSubmit={handleUpdate}\n            nameToUpdate={name}\n            numberToUpdate={number}\n          />\n        </Modal>\n      )}\n\n      {showConfirm && (\n        <Modal onClose={toggleConfirm}>\n          <Confirm\n            onFormSubmit={() => handleDelete(id)}\n            toggleConfirm={toggleConfirm}\n            name={name}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export function getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  padding-right: 8px;\n  color: #212121;\n\n  transition: background-color 250ms linear;\n\n  :hover {\n    background-color: #fcd535;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { Item } from './ContactList.styled';\n\nexport function ContactList({ contacts }) {\n  return (\n    <ul>\n      {contacts\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map(({ id, name, number }) => (\n          <Item key={id}>\n            <ContactListItem id={id} name={name} number={number} />\n          </Item>\n        ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrap = styled.div`\n  padding: 4px 8px;\n`\n\nexport const Input = styled.input`\n  display: block;\n  text-align: left;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 4px 8px;\n`;","import { FilterWrap, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterChange } from 'redux/filter';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const handleFilter = event => {\n    dispatch(filterChange(event.currentTarget.value));\n  };\n\n  return (\n    <FilterWrap>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilter}\n        placeholder=\"Find contact by name\"\n      />\n    </FilterWrap>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { Text } from './Notification.styled';\n\nexport function Notification({ msg }) {\n  return <Text>{msg}</Text>;\n}\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","import { Box } from 'components/Box/Box';\nimport { Header, Container, Contacts, Footer } from './ContactsPage.styled';\nimport { UserMenu } from 'components/UserMenu/UserMenu';\nimport { AddForm } from 'components/AddForm/AddForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Button } from 'components/Button/Button.styled';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { fetchContacts } from 'redux/operations';\n\nimport { Notification } from 'components/Notification/Notification';\nimport Modal from 'components/Modal/Modal';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n  const contacts = useSelector(state => state.contacts);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const [showModalForm, setShowModalForm] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts\n    ? contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : '';\n\n  const toggleModalForm = () => {\n    setShowModalForm(!showModalForm);\n  };\n\n  return (\n    <>\n      {!isLoggedIn && <Navigate to=\"/\" />}\n\n      <Header>\n        <Container>\n          <UserMenu />\n\n          <Filter />\n        </Container>\n      </Header>\n\n      <Contacts>\n        {filteredContacts.length > 0 || filter ? (\n          <ContactList contacts={filteredContacts ?? []} />\n        ) : (\n          <Notification msg=\"No contacts added\" />\n        )}\n      </Contacts>\n\n      <Footer>\n        <Container>\n          <Button type=\"button\" onClick={toggleModalForm}>\n            Add Contact\n          </Button>\n        </Container>\n      </Footer>\n\n      <Box position=\"absolute\" right=\"0\" top=\"0\">\n        {showModalForm && (\n          <Modal onClose={toggleModalForm}>\n            <AddForm toggleModalForm={toggleModalForm} />\n          </Modal>\n        )}\n      </Box>\n    </>\n  );\n}\n"],"names":["Header","styled","Container","Contacts","Footer","UserMenuWrap","Button","UserMenu","dispatch","useDispatch","userName","useSelector","state","auth","user","name","type","onClick","logout","FormStyled","Form","FormField","Input","Field","FormBtn","ErrorStyled","ErrorMessage","schema","yup","shape","required","number","AddForm","toggleModalForm","contacts","onSubmit","newContact","resetForm","find","contact","toLowerCase","alert","addContact","initialValues","validationSchema","Box","placeholder","component","size","fill","Overlay","ModalWrap","modalRoot","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","handleEscape","removeEventListener","event","code","createPortal","currentTarget","target","phone","EditForm","onFormSubmit","nameToUpdate","numberToUpdate","values","console","log","ContactName","ContactNumber","ContactBtn","EditBtn","DelBtn","Confirm","toggleConfirm","width","display","justifyContent","ContactListItem","id","useState","showEditForm","setShowEditForm","showConfirm","setShowConfirm","toggleEditForm","alignItems","p","color","Math","floor","random","toString","updatedContact","updateContact","contactId","deleteContact","Item","ContactList","sort","a","b","localeCompare","map","FilterWrap","Filter","filter","value","onChange","filterChange","Text","Notification","msg","ContactsPage","isLoggedIn","showModalForm","setShowModalForm","fetchContacts","filteredContacts","includes","to","length","position","right","top"],"sourceRoot":""}