{"version":3,"file":"static/js/711.00fd78c5.chunk.js","mappings":"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","sources":["pages/ContactsPage/ContactsPage.styled.jsx","components/ContactForm/ContactForm.styled.jsx","utils/getRandomHexColor.js","components/AddForm/AddForm.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.js","components/EditForm/EditForm.js","components/ContactListItem/ContactListItem.styled.jsx","components/Confirm/Confirm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/Notification/Notification.styled.jsx","components/Notification/Notification.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Container } from 'components/SharedLayout/SharedLayout.styled';\n\nexport const ContactPageWrap = styled(Container)`\n  max-width: 360px;\n  margin: 0 auto;\n  background-color: #fff;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.8);\n`;\n\nexport const Contacts = styled.div`\n  max-width: 360px;\n  margin: 0 auto;\n  background-color: #ffffff;\n  border-top: 1px solid lightgrey;\n`;\n\nexport const Footer = styled.div`\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 36px;\n  background: #212121;\n  color: #ffffff;\n  z-index: 1000;\n`;\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport InputMask from 'react-input-mask';\n\nexport const FormStyled = styled(Form)`\n  text-align: center;\n  width: 360px;\n  padding: 16px;\n  border: 1px solid #212121;\n  border-radius: 4px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.8);\n  background-color: white;\n\n  @media screen and (max-width: 360px) {\n    width: 100%;\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:not(:first-of-type) {\n    margin-top: 16px;\n  }\n`\n\nexport const InputName = styled(Field)`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  padding: 4px;\n  font-weight: 700;\n  text-transform: capitalize;\n  width: 200px;\n`;\n\nexport const InputNumber = styled(InputMask)`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  padding: 4px;\n  width: 200px;\n`;\n\nexport const FormBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 60px;\n  height: 60px;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 50%;\n  cursor: pointer;\n  font-weight: 700;\n\n  transition: color 250ms linear, background-color 250ms linear;\n\n  :hover {\n    background-color: #ffcc00;\n    color: white;\n  }\n`;\n\nexport const ErrorStyled = styled(ErrorMessage)`\n  position: absolute;\n  bottom: 0;\n  transform: translatey(100%);\n\n  font-size: 10px;\n  background-color: white;\n  color: #212121;\n`;\n","export function getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n","import PropTypes from 'prop-types';\nimport { HiPhone, HiUserAdd } from 'react-icons/hi';\nimport { MdOutlineDataSaverOn } from 'react-icons/md';\nimport { Box } from 'components/Box/Box';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport {\n  FormStyled,\n  FormField,\n  InputName,\n  InputNumber,\n  FormBtn,\n  ErrorStyled,\n} from 'components/ContactForm/ContactForm.styled';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nexport function AddForm({ toggleModalForm }) {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n\n  const handleSubmit = (newContact, { resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(` ${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    resetForm();\n    toggleModalForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <BsPersonCircle size=\"64\" color={getRandomHexColor()} />\n\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          mt={4}\n        >\n          <Box>\n            <FormField>\n              <HiUserAdd />\n              <InputName type=\"text\" name=\"name\" placeholder=\"Name\" />\n              <ErrorStyled component=\"div\" name=\"name\" />\n            </FormField>\n\n            <FormField>\n              <HiPhone />\n              <Field\n                type=\"tel\"\n                name=\"number\"\n                render={({ field }) => (\n                  <InputNumber\n                    {...field}\n                    mask=\"+99 999 999 9999\"\n                    placeholder=\"number\"\n                  />\n                )}\n              />\n              <ErrorStyled component=\"div\" name=\"number\" />\n            </FormField>\n          </Box>\n\n          <FormBtn type=\"submit\" aria-label=\"Add contact\">\n            <MdOutlineDataSaverOn size=\"40\" fill=\"currentColor\" />\n          </FormBtn>\n        </Box>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nAddForm.propTypes = {\n  toggleModalForm: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  padding-top: 8px;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalWrap = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Overlay, ModalWrap } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = event => {\n    if (event.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdrop = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdrop}>\n      <ModalWrap>{children}</ModalWrap>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { HiPhone, HiUserAdd } from 'react-icons/hi';\nimport { MdSave } from 'react-icons/md';\nimport { Box } from 'components/Box/Box';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormStyled,\n  FormField,\n  InputName,\n  InputNumber,\n  FormBtn,\n  ErrorStyled,\n} from 'components/ContactForm/ContactForm.styled';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nexport function EditForm({ onFormSubmit, nameToUpdate, numberToUpdate }) {\n  const updateContact = values => {\n    console.log(values);\n    onFormSubmit(values);\n  };\n\n  return (\n    <Formik\n      onSubmit={updateContact}\n      initialValues={{\n        name: nameToUpdate,\n        number: numberToUpdate,\n      }}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <BsPersonCircle size=\"64\" color={getRandomHexColor()} />\n\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          mt={4}\n        >\n          <Box>\n            <FormField>\n              <HiUserAdd />\n              <InputName type=\"text\" name=\"name\" placeholder=\"Name\" />\n              <ErrorStyled component=\"div\" name=\"name\" />\n            </FormField>\n\n            <FormField>\n              <HiPhone />\n              <Field\n                type=\"tel\"\n                name=\"number\"\n                render={({ field }) => (\n                  <InputNumber\n                    {...field}\n                    mask=\"+99 999 999 9999\"\n                    placeholder=\"number\"\n                  />\n                )}\n              />\n              <ErrorStyled component=\"div\" name=\"number\" />\n            </FormField>\n          </Box>\n\n          <FormBtn type=\"submit\" aria-label=\"Formtact\">\n            <MdSave size=\"40\" />\n          </FormBtn>\n        </Box>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nEditForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  nameToUpdate: PropTypes.string.isRequired,\n  numberToUpdate: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactName = styled.span`\n  margin-left: 8px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const ContactNumber = styled.span`\n  margin: 0 4px 0 auto;\n  font-size: 14px;\n  font-weight: 400;\n`;\n\nexport const ContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 4px;\n  padding: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  color: #666666;\n\n  transition: color 250ms linear;\n`;\n\nexport const EditBtn = styled(ContactBtn)`\n  :hover {\n    color: #212121;\n  }\n`;\n\nexport const DelBtn = styled(ContactBtn)`\n  :hover {\n    color: red;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Box } from 'components/Box/Box';\nimport { Formik } from 'formik';\nimport { FormStyled, FormBtn } from 'components/ContactForm/ContactForm.styled';\n\nexport function Confirm({ onFormSubmit, toggleConfirm, name }) {\n  return (\n    <Formik>\n      <FormStyled>\n        <Box width=\"100%\">\n          <p>\n            Delete contact <b>{name}</b>?\n          </p>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <FormBtn type=\"button\" aria-label=\"Cancel\" onClick={toggleConfirm}>\n              Cancel\n            </FormBtn>\n\n            <FormBtn\n              type=\"button\"\n              aria-label=\"Delete contact\"\n              onClick={onFormSubmit}\n            >\n              DELETE\n            </FormBtn>\n          </Box>\n        </Box>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nConfirm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n  toggleConfirm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { MdEdit, MdDeleteForever } from 'react-icons/md';\nimport { BsPersonCircle } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport { EditForm } from 'components/EditForm/EditForm';\nimport { Box } from 'components/Box/Box';\nimport { deleteContact, updateContact } from 'redux/operations';\nimport {\n  ContactName,\n  ContactNumber,\n  EditBtn,\n  DelBtn,\n} from './ContactListItem.styled';\nimport { Confirm } from 'components/Confirm/Confirm';\nimport { getRandomHexColor } from 'utils/getRandomHexColor';\n\nexport function ContactListItem({ id, name, number }) {\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleEditForm = () => {\n    setShowEditForm(!showEditForm);\n  };\n\n  const toggleConfirm = () => {\n    setShowConfirm(!showConfirm);\n  };\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact({ contactId, name }));\n  };\n\n  const handleUpdate = updatedContact => {\n    dispatch(updateContact({ id, ...updatedContact }));\n    toggleEditForm();\n  };\n\n  return (\n    <>\n      <Box width=\"100%\" display=\"flex\" alignItems=\"center\" p={2}>\n        <BsPersonCircle size=\"20\" color={getRandomHexColor()} />\n        <ContactName>{name}</ContactName>\n        <ContactNumber>{number}</ContactNumber>\n      </Box>\n\n      <EditBtn type=\"button\" onClick={toggleEditForm} aria-label=\"Edit contact\">\n        <MdEdit size=\"18\" />\n      </EditBtn>\n\n      <DelBtn\n        type=\"button\"\n        onClick={() => setShowConfirm(true)}\n        aria-label=\"Delete contact\"\n      >\n        <MdDeleteForever size=\"18\" />\n      </DelBtn>\n\n      {showEditForm && (\n        <Modal onClose={toggleEditForm}>\n          <EditForm\n            onFormSubmit={handleUpdate}\n            nameToUpdate={name}\n            numberToUpdate={number}\n          />\n        </Modal>\n      )}\n\n      {showConfirm && (\n        <Modal onClose={toggleConfirm}>\n          <Confirm\n            onFormSubmit={() => handleDelete(id)}\n            toggleConfirm={toggleConfirm}\n            name={name}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 4px 8px;\n  color: #212121;\n\n  transition: background-color 250ms linear;\n\n  :hover {\n    background-color: ${p => p.theme.colors.accent};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { Item } from './ContactList.styled';\n\nexport function ContactList({ contacts }) {\n  return (\n    <ul>\n      {contacts\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map(({ id, name, number }) => (\n          <Item key={id}>\n            <ContactListItem id={id} name={name} number={number} />\n          </Item>\n        ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrap = styled.div`\n  padding: 4px 8px;\n`\n\nexport const Input = styled.input`\n  display: block;\n  text-align: left;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 4px 8px;\n`;","import { FilterWrap, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterChange } from 'redux/filter';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const handleFilter = event => {\n    dispatch(filterChange(event.currentTarget.value));\n  };\n\n  return (\n    <FilterWrap>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilter}\n        placeholder=\"Find contact by name\"\n      />\n    </FilterWrap>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  padding-top: 16px;\n  padding-bottom: 16px;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { Text } from './Notification.styled';\n\nexport function Notification({ msg }) {\n  return <Text>{msg}</Text>;\n}\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","import { Box } from 'components/Box/Box';\nimport { ContactPageWrap, Contacts } from './ContactsPage.styled';\nimport { AddForm } from 'components/AddForm/AddForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Button } from 'components/Button/Button.styled';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { fetchContacts } from 'redux/operations';\n\nimport { Notification } from 'components/Notification/Notification';\nimport Modal from 'components/Modal/Modal';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n  const contacts = useSelector(state => state.contacts);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const [showModalForm, setShowModalForm] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts\n    ? contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : '';\n\n  const toggleModalForm = () => {\n    setShowModalForm(!showModalForm);\n  };\n\n  return (\n    <ContactPageWrap>\n      {!isLoggedIn && <Navigate to=\"/login\" />}\n\n      <Box\n        p={2}\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Filter />\n        <Button type=\"button\" onClick={toggleModalForm}>\n          Add New\n        </Button>\n      </Box>\n\n      <Contacts>\n        {filteredContacts.length > 0 || filter ? (\n          <ContactList contacts={filteredContacts ?? []} />\n        ) : (\n          <Notification msg=\"No contacts added\" />\n        )}\n      </Contacts>\n\n      <Box position=\"absolute\" right=\"0\" top=\"0\">\n        {showModalForm && (\n          <Modal onClose={toggleModalForm}>\n            <AddForm toggleModalForm={toggleModalForm} />\n          </Modal>\n        )}\n      </Box>\n    </ContactPageWrap>\n  );\n}\n"],"names":["ContactPageWrap","styled","Container","Contacts","FormStyled","Form","FormField","InputName","Field","InputNumber","InputMask","FormBtn","ErrorStyled","ErrorMessage","getRandomHexColor","Math","floor","random","toString","schema","yup","shape","name","required","number","AddForm","toggleModalForm","dispatch","useDispatch","contacts","useSelector","state","onSubmit","newContact","resetForm","find","contact","toLowerCase","alert","addContact","initialValues","validationSchema","size","color","Box","display","alignItems","justifyContent","mt","type","placeholder","component","render","field","mask","fill","Overlay","ModalWrap","modalRoot","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","handleEscape","removeEventListener","event","code","createPortal","onClick","currentTarget","target","EditForm","onFormSubmit","nameToUpdate","numberToUpdate","values","console","log","ContactName","ContactNumber","ContactBtn","EditBtn","DelBtn","Confirm","toggleConfirm","width","ContactListItem","id","useState","showEditForm","setShowEditForm","showConfirm","setShowConfirm","toggleEditForm","p","updatedContact","updateContact","contactId","deleteContact","Item","theme","colors","accent","ContactList","sort","a","b","localeCompare","map","FilterWrap","Input","Filter","filter","value","onChange","filterChange","Text","Notification","msg","ContactsPage","isLoggedIn","auth","showModalForm","setShowModalForm","fetchContacts","filteredContacts","includes","to","length","position","right","top"],"sourceRoot":""}